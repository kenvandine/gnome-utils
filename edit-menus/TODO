
OK, thinking out loud:

The information being kept about each menu entry is basically the same
as that being kept for a GnomeDesktopEntry (only less). That is, name,
command, icon; tree structure. I think this app should directly edit a
tree of GnomeDesktopEntry, and have "import" and "export" functions
for other kinds of menus.

Toward this end:

* Need to finish the MenuTree widget (see menutree.h) make it a
general "tree of DesktopEntry displayer." Could be used in file
manager type things too. API much like GtkTree.

* Need to change "MenuEntryWiz" to a general DesktopEntryEditor, which
should be a PropertyBox subclass.

* There should be a gnome_appmenu_load() function in libgnomeui, so
Gnome apps can directly access the created menu rather than having an
import/export module like icewm. It should return a start menu sort of
widget, or a tree structure, something nice and easy to use. Probably
return a tree structure and have a tree->widget converter is most
flexible. This can be used by all kinds of apps.
 
* panel/menu.c already has much of the relevant code.

* How does the saving work now? From an old Gnome I just have the menu
directories dumped straight into .gnome, not even in a subdir of
.gnome. This seems problematic, I don't know if it's still done that
way. I wish someone would .deb-ify Mico, before I'm forced to compile
it.

I will probably do the widgets first, because they're easier and I'll
want to display the other stuff as I work on it. I am pretty busy now
so anyone is welcome to work on this, or their own idea of how it
should be done.

Comments welcome.

Known problems:

If you try to cut the root menu, the program will get horribly
confused.

When the test menu is being created, Gtk dribbles little gray squares.

The icewm-saver doesn't handle memory right, and it doesn't write
to disk.

No gnome-config, no standard accelerators, no session management.

Menu icons aren't shown in the tree view.

The tree view should be a widget, that manages the selection and so
on. This would allow 2 tree views, and reduce the number of global
variables. This is already started in the menutree.* files - if you
work on this please don't feel bound by the cruddy API in menutree.h
now, figure out a good one.



